{
  "hash": "c816bf8c36ac14b02a283527065c6139",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Analysis of NFL Dataset\"\nauthor: \"Ayorinde Ayomide David\"\ndate: \"2025-07-28\"\ncategories: [code, analysis, r]\nimage: nfl.jpg\n---\n\n---\ntitle: \"Analysis of NFL Dataset\"\nauthor: \"Ayorinde Ayomide David\"\ndate: \"2025-07-28\"\noutput: pdf_document\neditor_options: \n  chunk_output_type: console\n---\n\n\n\nThis project explores the data from the 2023/24 NFL season to provide valuable insight about the happenings of the season\n\n\n\n\n\n\n\n### Loading dependencies\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(pacman)) install.packages(\"pacman\") # installing the package manager\n\npacman::p_load(tidyverse, #R meta-package\n               nflreadr, # R library for NFL data\n               gt, # R library for interactive tables\n               ggimage, # R library  \n               gtExtras,\n               future,\n               visdat,\n               inspectdf, # R library for visual EDA\n               gtsummary) # R library for descriptive EDA\n```\n:::\n\n\n\n### Telling R to run future tasks in parallel i.e each on its own background session in R(seperate R process)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplan(\"multisession\")\noptions(timeout = 300) # Timeout of 60secs was reached without the dataset being loaded. Hence, the need to manually increase the timeout limit to  5 mins\n```\n:::\n\n\n\n### Loading NFL data for 2023/24 season\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbp <- load_pbp(2023)\nplan(\"sequential\")\n```\n:::\n\n\n\n### Exploring, selecting and inspecting the variables of interest \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Exploring the whole dataset\n\ndim(pbp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 49665   372\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(pbp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 372\n  play_id game_id      old_game_id home_team away_team season_type  week posteam\n    <dbl> <chr>        <chr>       <chr>     <chr>     <chr>       <int> <chr>  \n1       1 2023_01_ARI… 2023091007  WAS       ARI       REG             1 <NA>   \n2      39 2023_01_ARI… 2023091007  WAS       ARI       REG             1 WAS    \n3      55 2023_01_ARI… 2023091007  WAS       ARI       REG             1 WAS    \n4      77 2023_01_ARI… 2023091007  WAS       ARI       REG             1 WAS    \n5     102 2023_01_ARI… 2023091007  WAS       ARI       REG             1 WAS    \n6     124 2023_01_ARI… 2023091007  WAS       ARI       REG             1 WAS    \n# ℹ 364 more variables: posteam_type <chr>, defteam <chr>, side_of_field <chr>,\n#   yardline_100 <dbl>, game_date <chr>, quarter_seconds_remaining <dbl>,\n#   half_seconds_remaining <dbl>, game_seconds_remaining <dbl>,\n#   game_half <chr>, quarter_end <dbl>, drive <dbl>, sp <dbl>, qtr <dbl>,\n#   down <dbl>, goal_to_go <int>, time <chr>, yrdln <chr>, ydstogo <dbl>,\n#   ydsnet <dbl>, desc <chr>, play_type <chr>, yards_gained <dbl>,\n#   shotgun <dbl>, no_huddle <dbl>, qb_dropback <dbl>, qb_kneel <dbl>, …\n```\n\n\n:::\n\n```{.r .cell-code}\n# Selecting the variable of interest\n\npbp_selected <- pbp %>% \n  select(game_id, week, home_team, away_team,season_type,game_date,result,home_score,away_score)\n\n#Inspecting the selected variables for missing values\n\npbp_selected %>% \n  filter(is.na(week)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 9\n# ℹ 9 variables: game_id <chr>, week <int>, home_team <chr>, away_team <chr>,\n#   season_type <chr>, game_date <chr>, result <int>, home_score <int>,\n#   away_score <int>\n```\n\n\n:::\n\n```{.r .cell-code}\npbp_selected %>% \n  filter(is.na(home_team))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 9\n# ℹ 9 variables: game_id <chr>, week <int>, home_team <chr>, away_team <chr>,\n#   season_type <chr>, game_date <chr>, result <int>, home_score <int>,\n#   away_score <int>\n```\n\n\n:::\n\n```{.r .cell-code}\npbp_selected %>% \n  filter(is.na(away_team))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 9\n# ℹ 9 variables: game_id <chr>, week <int>, home_team <chr>, away_team <chr>,\n#   season_type <chr>, game_date <chr>, result <int>, home_score <int>,\n#   away_score <int>\n```\n\n\n:::\n\n```{.r .cell-code}\npbp_selected %>% \n  filter(is.na(season_type))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 9\n# ℹ 9 variables: game_id <chr>, week <int>, home_team <chr>, away_team <chr>,\n#   season_type <chr>, game_date <chr>, result <int>, home_score <int>,\n#   away_score <int>\n```\n\n\n:::\n\n```{.r .cell-code}\npbp_selected %>% \n  filter(is.na(game_date))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 9\n# ℹ 9 variables: game_id <chr>, week <int>, home_team <chr>, away_team <chr>,\n#   season_type <chr>, game_date <chr>, result <int>, home_score <int>,\n#   away_score <int>\n```\n\n\n:::\n\n```{.r .cell-code}\npbp_selected %>% \n  filter(is.na(result))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 9\n# ℹ 9 variables: game_id <chr>, week <int>, home_team <chr>, away_team <chr>,\n#   season_type <chr>, game_date <chr>, result <int>, home_score <int>,\n#   away_score <int>\n```\n\n\n:::\n\n```{.r .cell-code}\npbp_selected %>% \n  filter(is.na(home_score))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 9\n# ℹ 9 variables: game_id <chr>, week <int>, home_team <chr>, away_team <chr>,\n#   season_type <chr>, game_date <chr>, result <int>, home_score <int>,\n#   away_score <int>\n```\n\n\n:::\n\n```{.r .cell-code}\npbp_selected %>% \n  filter(is.na(away_score))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 9\n# ℹ 9 variables: game_id <chr>, week <int>, home_team <chr>, away_team <chr>,\n#   season_type <chr>, game_date <chr>, result <int>, home_score <int>,\n#   away_score <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Inspecting the categorical variables from pbp_selected for inconsistency\n\npbp_selected %>% \n  select(home_team) %>% \n  unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 1\n   home_team\n   <chr>    \n 1 WAS      \n 2 NYJ      \n 3 ATL      \n 4 CLE      \n 5 NYG      \n 6 KC       \n 7 CHI      \n 8 BAL      \n 9 IND      \n10 SEA      \n# ℹ 22 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\npbp_selected %>% \n  select(away_team) %>% \n  unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 1\n   away_team\n   <chr>    \n 1 ARI      \n 2 BUF      \n 3 CAR      \n 4 CIN      \n 5 DAL      \n 6 DET      \n 7 GB       \n 8 HOU      \n 9 JAX      \n10 LA       \n# ℹ 22 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\npbp_selected %>% \n  select(season_type) %>% \n  unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 1\n  season_type\n  <chr>      \n1 REG        \n2 POST       \n```\n\n\n:::\n\n```{.r .cell-code}\n# Dropping duplicate entries\npbp_selected <- pbp_selected %>% \n  unique()\n```\n:::\n\n\n\n### Analyzing the dataset to identify the team who won the SUPER BOWL\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbp_selected_post <- pbp_selected %>% # Filtering the dataset to include only SUPER BOWL matches\n  filter(season_type == \"POST\")\n\n\npbp_post_winners <- pbp_selected_post %>% # Creating a new column for the winning teams across the matches played\n  mutate(home_winner = result >0, \n         winning_team = case_when(home_winner == T ~ home_team,\n                                  home_winner == F ~ away_team))\n\npbp_post_winners %>%  # filtering by week and selecting the winning team column to identify 2023/24 season Super Bowl winner\n  filter(week == 22) %>% \n  select(winning_team)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  winning_team\n  <chr>       \n1 KC          \n```\n\n\n:::\n:::\n\n\n\n### Calculating the point differential for the 2023/24 season ----\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbp_selected_diff <- pbp_selected %>% \n  filter(season_type == \"REG\") %>% \n  group_by(home_team) %>% \n  mutate(home_pf = sum(home_score),\n         home_pa = sum(away_score)) %>% \n  ungroup() %>% \n  group_by(away_team) %>% \n  mutate(away_pf = sum(away_score),\n         away_pa = sum(home_score)) %>% \n  ungroup()\n\npbp_selected_diff1 <- pbp_selected_diff %>% \n  reframe(team = home_team,\n          pf = home_pf,\n          pa =home_pa) %>% \n  unique()\n\npbp_selected_diff2 <- pbp_selected_diff %>% \n  reframe(team = away_team,\n          pf = away_pf,\n          pa = away_pa) %>% \n  unique()\n\npbp_diff_comb <- rbind(pbp_selected_diff1,pbp_selected_diff2) %>% \n  group_by(team) %>% \n  mutate(pf = sum(pf), pa = sum(pa), pt_diff = pf - pa) %>% \n  unique()\n\npbp_diff_comb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 4\n# Groups:   team [32]\n   team     pf    pa pt_diff\n   <chr> <int> <int>   <int>\n 1 WAS     329   518    -189\n 2 NYJ     268   355     -87\n 3 ATL     321   373     -52\n 4 CLE     396   362      34\n 5 NYG     266   407    -141\n 6 KC      371   294      77\n 7 CHI     360   379     -19\n 8 BAL     483   280     203\n 9 IND     396   415     -19\n10 SEA     364   402     -38\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}