---
title: "Analysis of NFL Dataset"
author: "Ayorinde Ayomide David"
categories: [code, analysis, r]
image: nfl.jpg
format:
  html:
    code-fold: true
    code-summary: "Code"
    toc: true
    toc-depth: 4
    toc-location: right
    highlight-style: github  # syntax highlight for code blocks
    code-copy: true
    code-overflow: wrap
    css: styles.css  
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE
)

if(!require(pacman)) install.packages("pacman") # installing the package manager

pacman::p_load(tidyverse, #R meta-package
               nflreadr, # R library for NFL data
               gt, # R library for interactive tables
               ggimage, # R library  
               gtExtras,
               future,
               visdat,
               janitor,
               inspectdf, # R library for visual EDA
               gtsummary) # R library for descriptive EDA

plan("multisession")
options(timeout = 300) # Timeout of 60secs was reached without the dataset being loaded. Hence, the need to manually increase the timeout limit to  5 mins

```

![](nfl.jpg){fig-align="center"}

## Introduction

The **National Football League (NFL)** is the premier professional American football league in the United States and one of the most popular sports organization in the world. Established in 1920 as the American Professional Football Association (APFA) and renamed the NFL in 1922, the league has grown into a cultural and economic powerhouse. It consists of 32 franchise, evenly splitted between the **American Football Conference (AFC)** and the **National Football Conference (NFC)**, each competing in a highly structured season followed by the **NFL Playoffs** and culminating in the globally renowned **Super Bowl**

Beyond its sporting appeal, the NFL represents a rich source of data for performance analytics, sports economics, and fan engagement studies. Player statistics, team performance metrics, play-by-play data, and injury reports provide a detailed view of how the game evolves over time.

## Objective


## Data Description

The dataset for this project was obtained using the nflreadr R package, a comprehensive interface for accessing public National Football League (NFL) data. The package aggregates data from reputable open-source repositories such as nflverse.com and pro-football-reference.com, providing a consistent, well-documented structure for analysis.

The data encompasses multiple aspects of NFL games, including but not limited to:

- Play-by-Play Data – detailed records of each play, including player actions, yardage gained or lost, penalties, and scoring outcomes.

- Player Statistics – offensive, defensive, and special teams metrics for individual players across seasons.

- Team Statistics – aggregated performance indicators such as wins, losses, points scored, and points allowed.

- Schedules and Results – game dates, locations, participating teams, and final scores.

- Injury Reports – weekly updates on player availability and injury status.
- 
The dataset spans multiple NFL seasons, offering both historical and current data. Variables are provided in a standardized format, with unique identifiers for games, plays, and players, enabling robust data linkage and longitudinal analysis.

## Data Cleaning, Preparation and Analysis

This phase of the project commenced with the importation of the necessary R libraries required for efficient data handling, transformation, visualization, and analysis. The core packages included:

- nflreadr – for accessing and importing publicly available NFL datasets.

- tidyverse – metapackage

- janitor - for data cleaning

Using the nflreadr package, the required dataset was imported directly into R; the play-by-play dataset to be precise. The play-by-play dataset for the chosen season was retrieved using the load_pbp() function. Upon loading, dataset structure and variable names were inspected using functions such as glimpse() and dim() to gain a preliminary understanding of its composition.

Thereafter, the first ten rows of the dataset were examined using the head() function to understand the entries of each column. This inspection provided insight into the type of data contained in each variable, the consistency of entries, and potential areas requiring preprocessing. It was observed that entries(game_id) were duplicated to collect data for different play type(kick off, run, pass, punt, no_play, extra_point, field_goal, qb_kneel, qb_spike). Apparently, the dataset contains an exceptionally large number of rows due to its play-by-play structure, where each row represents a single play rather than a single game. During the course of this exploration, variables of interest were identified and selected for the analysis.  


### Data Cleaning and Preparation
```{r c}
pbp <- load_pbp(2023)
plan("sequential")

# dim(pbp)  # Investigating the number of rows and columns in the dataset
# glimpse(pbp) # Investigating the properties of the dataset
# head(pbp, n =10) # Inspecting the first 10 rows of the dataset
# pbp %>%   # Investigating the number of duplicated entries
  #get_dupes(game_id)

#is.na(pbp) # Investigating the columns with missing value

pbp_selected <- pbp %>%  # Selecting the columns of interest
  select(game_id, week, home_team, away_team,season_type,game_date,result,home_score,away_score)

#pbp_selected %>% # Inspecting the home_team columns for inconsistency
  #select(home_team) %>% 
  #unique()

#pbp_selected %>% # Inspecting the away_team columns for inconsistency
  #select(away_team) %>% 
  #unique()

#pbp_selected %>% # Inspecting the season_type columns for inconsistency
  #select(season_type) %>% 
  #unique()

pbp_selected <- pbp_selected %>%  # Dropping duplicate entries
  unique()

```


### Analyzing the dataset to identify the team who won the SUPER BOWL

```{r e}
pbp_selected_post <- pbp_selected %>% # Filtering the dataset to include only SUPER BOWL matches
  filter(season_type == "POST")


pbp_post_winners <- pbp_selected_post %>% # Creating a new column for the winning teams across the matches played
  mutate(home_winner = result >0, 
         winning_team = case_when(home_winner == T ~ home_team,
                                  home_winner == F ~ away_team))

pbp_post_winners %>%  # filtering by week and selecting the winning team column to identify 2023/24 season Super Bowl winner
  filter(week == 22) %>% 
  select(winning_team)
```

### Calculating the point differential for the 2023/24 season

```{r f}
pbp_selected_diff <- pbp_selected %>% 
  filter(season_type == "REG") %>% 
  group_by(home_team) %>% 
  mutate(home_pf = sum(home_score),
         home_pa = sum(away_score)) %>% 
  ungroup() %>% 
  group_by(away_team) %>% 
  mutate(away_pf = sum(away_score),
         away_pa = sum(home_score)) %>% 
  ungroup()

pbp_selected_diff1 <- pbp_selected_diff %>% 
  reframe(team = home_team,
          pf = home_pf,
          pa =home_pa) %>% 
  unique()

pbp_selected_diff2 <- pbp_selected_diff %>% 
  reframe(team = away_team,
          pf = away_pf,
          pa = away_pa) %>% 
  unique()

pbp_diff_comb <- rbind(pbp_selected_diff1,pbp_selected_diff2) %>% 
  group_by(team) %>% 
  mutate(pf = sum(pf), pa = sum(pa), pt_diff = pf - pa) %>% 
  unique()

pbp_diff_comb


# Creating a csv file of point differential
write_csv(pbp_diff_comb, "poinit_diffential.csv")
```

### Visualizing the dataset

```{r g}
pbp_ptdiff_comb <- read_csv("poinit_diffential.csv")

teams_colors_logos <- load_teams()
teams_colors_logos_logo <- teams_colors_logos %>% 
  select(team_abbr,team_name,team_logo_espn,team_wordmark,team_color,team_color2)

pbp_ptdiff_comb_modified <- pbp_ptdiff_comb %>% 
  left_join(teams_colors_logos_logo, by = c("team"="team_abbr"))

options(timeout = 300)
pbp_ptdiff_comb_modified %>% 
  ggplot(mapping = aes(x = reorder(team_name, pf),y = pf)) +
  geom_bar(aes(fill = team_color, colour = team_color2), stat = "identity") +
  scale_color_identity(aesthetics = c("fill","color")) +
  geom_image(aes(y = pf + 11, image = team_logo_espn), 
             asp = 16/9, size = 0.025) +
  labs(x = "Team",
       y = "PF",
       title = "Bar chart of Total Points Scored by Each Team",
       subtitle = "2023 Season W1 - W18 | Data via NFLReadr",
       caption = "Ayorinde Ayomide David") +
  theme(plot.title = element_text(hjust = 0.5,
                                  face = "bold",
                                  size = 20),
        plot.subtitle = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))


pbp_ptdiff_comb_modified %>% 
  ggplot(mapping = aes(x = pf,
                       y = pa)) +
  geom_abline(slope = -1, intercept = 0, color = "grey", alpha = 0.5)+
  geom_abline(slope = -1, intercept = 50, color = "grey", alpha = 0.5)+
  geom_abline(slope = -1, intercept = -50, color = "grey", alpha = 0.5)+
  geom_abline(slope = -1, intercept = 100, color = "grey", alpha = 0.5)+
  geom_abline(slope = -1, intercept = -100, color = "grey", alpha = 0.5)+
  geom_abline(slope = -1, intercept = 150, color = "grey", alpha = 0.5)+
  geom_abline(slope = -1, intercept = -150, color = "grey", alpha = 0.5)+
  geom_abline(slope = -1, intercept = 200, color = "grey", alpha = 0.5)+
  geom_abline(slope = -1, intercept = -200, color = "grey", alpha = 0.5)+
  scale_y_reverse() +
  geom_image(aes(image = team_logo_espn),
             asp = 16/19,
             size = 0.04) +
  labs(x = "Point For",
       y = "Point Against",
       title = "NFL Points For and Against",
       subtitle = "2023 Season W1-W18 | Data via NFLReadr",
       caption= "Ayorinde Ayomide David") +
  theme(plot.title = element_text(hjust = 0.5, 
                                  face = "bold",
                                  size = 20),
        plot.subtitle = element_text(hjust = 0.5)
  )



pbp_ptdiff_comb_modified %>% 
  reframe(team_wordmark,pf,pa,pt_diff) %>% 
  arrange(-pt_diff) %>% 
  gt() %>% 
  gt_img_rows(team_wordmark) %>% 
  cols_label(team_wordmark = "Team",
             pf = "PF",
             pa = "PA",
             pt_diff = "PD") %>% 
  cols_align(align = "center") %>% 
  gt_theme_espn() %>% 
  tab_header(title = "Team Point Differentials 2023/24 Season") %>% 
  data_color(columns = c(pt_diff),
             target_columns = c(pt_diff),
             colors = scales::col_numeric(
               palette = c("tomato3", "green4"),
               domain = NULL
             ))
  

```
